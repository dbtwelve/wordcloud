{"version":3,"sources":["fbase.js","routes/Profile.js","components/AuthForm.js","routes/Auth.js","components/PostUpdate.js","components/Post.js","components/PostFactory.js","routes/Home.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","refreshUser","userObj","history","useHistory","useState","displayName","newDisplayName","setNewDisplayName","getMyPosts","a","collection","where","uid","orderBy","get","useEffect","onSubmit","event","preventDefault","updateProfile","className","onChange","value","target","type","autoFocus","placeholder","style","marginTop","onClick","signOut","push","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","required","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","marginBottom","faGoogle","faGithub","PostUpdate","postObj","toggleEditing","text","newPost","setNewPost","attachmentURL","newAttachment","setNewAttachment","newAttachmentURL","attachmentRef","ref","child","creatorId","uuidv4","putString","response","getDownloadURL","doc","id","update","src","backgroundImage","alt","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","faTimes","Post","isOwner","editing","setEditing","onDeleteClick","window","confirm","delete","refFromURL","faTrash","faPencilAlt","PostFactory","upload","setUpload","attachment","setAttachment","post","createdAt","Date","now","add","maxLength","Home","postlist","setPostList","getData","onSnapshot","snapshot","postArray","docs","map","list","Navigation","display","justifyContent","to","marginRight","faCloudUploadAlt","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAiBEA,IAASC,cAZY,CACnBC,OAAQC,0CACRC,WAAYD,kCACZE,UAAWF,kBACXG,cAAeH,8BACfI,kBAAmBJ,eACnBK,MAAOL,6CACPM,cAAeN,iBAMV,IAAMO,EAAmBV,IACnBW,EAAcX,IAASY,OACvBC,EAAYb,IAASc,YACrBC,EAAiBf,IAASgB,U,OCjB1B,cAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,QACpBC,EAAUC,cAChB,EAA4CC,mBAASH,EAAQI,aAA7D,mBAAOC,EAAP,KAAuBC,EAAvB,KAKMC,EAAU,uCAAG,sBAAAC,EAAA,sEACKb,EACCc,WAAW,SACXC,MAAM,YAAa,KAAMV,EAAQW,KACjCC,QAAQ,aACRC,MALN,yDAAH,qDAQhBC,qBAAU,WACNP,MACD,IAEH,IAMMQ,EAAQ,uCAAG,WAAOC,GAAP,SAAAR,EAAA,yDACbQ,EAAMC,iBACHjB,EAAQI,cAAgBC,EAFd,gCAGHL,EAAQkB,cAAc,CACxBd,YAAaC,IAJR,OAMTN,IANS,2CAAH,sDASd,OACI,sBAAKoB,UAAU,YAAf,UACI,uBAAMJ,SAAUA,EAAUI,UAAU,cAApC,UACA,uBACIC,SAnBK,SAACJ,GACd,IACaK,EACTL,EADAM,OAASD,MAEbf,EAAkBe,IAgBVE,KAAK,OACLC,WAAS,EACTC,YAAY,eACZJ,MAAOhB,EACPc,UAAU,cAEd,uBACII,KAAK,SACLF,MAAM,iBACNF,UAAU,UACVO,MAAO,CACHC,UAAW,SAIvB,sBAAMR,UAAU,2BAA2BS,QAnDzB,WAClBnC,EAAYoC,UACZ5B,EAAQ6B,KAAK,MAiDb,yBCOOC,EA9DE,WACb,MAA0B5B,mBAAS,IAAnC,mBAAO6B,EAAP,KAAcC,EAAd,KACA,EAAgC9B,mBAAS,IAAzC,mBAAO+B,EAAP,KAAiBC,EAAjB,KACA,EAAoChC,oBAAS,GAA7C,mBAAOiC,EAAP,KAAmBC,EAAnB,KACA,EAA0BlC,mBAAS,IAAnC,mBAAOmC,EAAP,KAAcC,EAAd,KACMnB,EAAW,SAACJ,GACd,MAAgCA,EAAzBM,OAASkB,EAAhB,EAAgBA,KAAMnB,EAAtB,EAAsBA,MACV,UAATmB,EACCP,EAASZ,GACM,aAATmB,GACNL,EAAYd,IAGdN,EAAQ,uCAAG,WAAMC,GAAN,eAAAR,EAAA,yDACbQ,EAAMC,iBADO,UAINmB,EAJM,gCAKQ3C,EAAYgD,+BAA+BT,EAAOE,GAL1D,OAKLQ,EALK,+CAOQjD,EAAYkD,2BAA2BX,EAAOE,GAPtD,QAOLQ,EAPK,eASTE,QAAQC,IAAIH,GATH,kDAWTH,EAAS,KAAMO,SAXN,0DAAH,sDAgBd,OACI,qCACI,uBAAM/B,SAAUA,EAAUI,UAAU,YAApC,UACI,uBACIqB,KAAK,QACLjB,KAAK,QACLE,YAAY,QACZsB,UAAQ,EAAC1B,MAAOW,EAChBZ,SAAUA,EACVD,UAAU,cAEd,uBACIqB,KAAK,WACLjB,KAAK,WACLE,YAAY,WACZsB,UAAQ,EAAC1B,MAAOa,EAChBd,SAAUA,EACVD,UAAU,cAEd,uBACII,KAAK,SACLF,MAAOe,EAAa,iBAAmB,SACvCjB,UAAU,4BAEjBmB,GAAS,sBAAMnB,UAAU,YAAhB,SAA6BmB,IACvC,sBAAMV,QA1BQ,kBAAMS,GAAc,SAACW,GAAD,OAAWA,MA0Bf7B,UAAU,aAAxC,SACKiB,EAAa,UAAY,uB,gBCR3Ba,EAvCF,WAGT,IAAMC,EAAa,uCAAG,WAAOlC,GAAP,iBAAAR,EAAA,4DAKN,YAHCgC,EACLxB,EADJM,OAASkB,MAITW,EAAW,IAAI3D,EAAiBE,KAAK0D,mBACrB,WAATZ,IACPW,EAAW,IAAI3D,EAAiBE,KAAK2D,oBARvB,SAUZ5D,EAAY6D,gBAAgBH,GAVhB,2CAAH,sDAanB,OACI,mCACA,sBAAKhC,UAAU,gBAAf,UACA,cAAC,IAAD,CACIoC,KAAMC,IACNC,MAAO,UACPC,KAAK,KACLhC,MAAO,CAAEiC,aAAc,MAEvB,cAAC,EAAD,IACA,sBAAKxC,UAAU,WAAf,UACI,yBAAQS,QAASsB,EAAeV,KAAK,SAASrB,UAAU,UAAxD,kCACqB,cAAC,IAAD,CAAiBoC,KAAMK,SAE5C,yBAAQhC,QAASsB,EAAeV,KAAK,SAASrB,UAAU,UAAxD,kCACqB,cAAC,IAAD,CAAiBoC,KAAMM,kB,wBCyD7CC,EA7FI,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,QAAQC,EAAmB,EAAnBA,cACzB,EAA8B7D,mBAAS4D,EAAQE,MAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0ChE,mBAAS4D,EAAQK,eAA3D,mBAAOC,EAAP,KAAsBC,EAAtB,KACMvD,EAAQ,uCAAG,WAAOC,GAAP,mBAAAR,EAAA,yDACbQ,EAAMC,iBACFsD,EAAmB,GACF,KAAlBF,EAHU,wBAIHG,EAAgB3E,EAAe4E,MAAMC,MAArB,UAA8BX,EAAQY,UAAtC,YAAmDC,gBAJhE,SAKcJ,EAAcK,UAAUR,EAAe,YALrD,cAKHS,EALG,gBAOgBA,EAASL,IAAIM,iBAP7B,OAOTR,EAPS,gCASP5E,EAAUqF,IAAV,gBAAuBjB,EAAQkB,KAAMC,OAAO,CAC9CjB,KAAMC,EACNE,cAAgBG,IAXP,QAabP,IAba,4CAAH,sDAuCd,OACI,qCACA,uBAAMjD,SAAUA,EAAUI,UAAU,qBAApC,UACI,uBACII,KAAK,OACLE,YAAY,iBACZJ,MAAO6C,EACP9C,SA/BK,SAACJ,GACd,IACaK,EACPL,EADFM,OAASD,MAEb8C,EAAW9C,IA4BH0B,UAAQ,EACRvB,WAAS,EACTL,UAAU,cAEbkD,GACG,sBAAKlD,UAAU,0BAAf,UACI,qBACAgE,IAAKd,EACL3C,MAAO,CACH0D,gBAAiBf,GAErBgB,IAAI,KAEJ,wBAAOC,QAAQ,cAAcnE,UAAU,uBAAvC,UACI,iDACA,cAAC,IAAD,CAAiBoC,KAAMgC,SAE3B,uBACIN,GAAG,cACH1D,KAAK,OACLiE,OAAO,UACPpE,SA/CC,SAACJ,GAClB,IAGMyE,EADEzE,EADJM,OAASoE,MAES,GAChBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAChB,IACoBC,EAChBD,EADAE,cAAgBD,OAEpBzB,EAAiByB,IAErBJ,EAAOM,cAAcR,GACrB7C,QAAQC,IAAIhD,EAAe4E,MAAMC,MAAMX,EAAQK,iBAmC/B1C,MAAO,CACPwE,QAAS,KAGb,sBAAK/E,UAAU,qBAAqBS,QArC1B,WACtB0C,EAAiB,KAoCL,UACA,0CACA,cAAC,IAAD,CAAiBf,KAAM4C,YAK/B,uBAAO5E,KAAK,SAASF,MAAM,cAAcF,UAAU,eAGvD,sBAAMS,QAASoC,EAAe7C,UAAU,oBAAxC,wBCnCOiF,EAnDF,SAAC,GAAwB,IAAvBrC,EAAsB,EAAtBA,QAASsC,EAAa,EAAbA,QACpB,EAA8BlG,oBAAS,GAAvC,mBAAOmG,EAAP,KAAgBC,EAAhB,KACMC,EAAa,uCAAG,sBAAAhG,EAAA,0DACDiG,OAAOC,QAAQ,8CADd,gCAGR/G,EAAUqF,IAAV,gBAAuBjB,EAAQkB,KAAM0B,SAH7B,uBAIR9G,EAAe+G,WAAW7C,EAAQK,eAAeuC,SAJzC,2CAAH,qDAOb3C,EAAgB,kBAAMuC,GAAW,SAACvD,GAAD,OAAWA,MAElD,OACI,mCACA,qBAAK7B,UAAU,OAAf,SAGQmF,EACI,mCACCD,GACG,cAAC,EAAD,CAAYtC,QAASA,EAASC,cAAeA,MAMjD,qCACCD,EAAQK,eAAiB,qBAAKe,IAAKpB,EAAQK,cAAeiB,IAAKtB,EAAQK,gBAExE,6BAAKL,EAAQE,OAGZoC,GACG,sBAAKlF,UAAU,gBAAf,UACI,sBAAMS,QAAS4E,EAAf,SACA,cAAC,IAAD,CAAiBjD,KAAMsD,QAEvB,sBAAMjF,QAASoC,EAAf,SACA,cAAC,IAAD,CAAiBT,KAAMuD,mBCwDpCC,EA7FK,SAAC,GAAe,IAAd/G,EAAa,EAAbA,QAClB,EAA6BG,mBAAS,IAAtC,mBAAO6G,EAAP,KAAeC,EAAf,KAEA,EAAoC9G,mBAAS,IAA7C,mBAAO+G,EAAP,KAAmBC,EAAnB,KACMpG,EAAQ,uCAAG,WAAOC,GAAP,qBAAAR,EAAA,yDACboC,QAAQC,IAAImE,EAAOhH,EAAQW,IAAIuG,GAChB,KAAXF,EAFS,oDAKbhG,EAAMC,iBACFmD,EAAgB,GACF,KAAf8C,EAPU,wBAQH1C,EAAgB3E,EAAe4E,MAAMC,MAArB,UAA8B1E,EAAQW,IAAtC,YAA6CiE,gBAR1D,SAScJ,EAAcK,UAAUqC,EAAY,YATlD,cASHpC,EATG,iBAWaA,EAASL,IAAIM,iBAX1B,QAWTX,EAXS,sBAaPgD,EAAO,CACTnD,KAAO+C,EACPK,UAAYC,KAAKC,MACjB5C,UAAY3E,EAAQW,IACpByD,iBAjBS,UAmBPzE,EAAUc,WAAW,SAAS+G,IAAIJ,GAnB3B,QAoBbH,EAAU,IACVE,EAAc,IArBD,4CAAH,sDA4Cd,OACI,uBAAMpG,SAAUA,EAAUI,UAAU,cAApC,UACI,sBAAKA,UAAU,0BAAf,UACI,uBACAA,UAAU,sBACVE,MAAO2F,EACP5F,SA3BK,SAACJ,GACd,IAAgBK,EAAUL,EAAnBM,OAASD,MAChB4F,EAAU5F,IA0BFE,KAAK,OACLE,YAAY,uBACZgG,UAAW,MAEX,uBAAOlG,KAAK,SAASF,MAAM,SAASF,UAAU,2BAElD,wBAAOmE,QAAQ,cAAcnE,UAAU,sBAAvC,UACI,8CACA,cAAC,IAAD,CAAiBoC,KAAMgC,SAE3B,uBACIN,GAAG,cACH1D,KAAK,OACLiE,OAAO,UACPpE,SAtCS,SAACJ,GAClB,IAGMyE,EADEzE,EADJM,OAASoE,MAES,GAChBC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,SAACC,GAChB,IACoBC,EAChBD,EADAE,cAAgBD,OAEpBoB,EAAcpB,IAElBJ,EAAOM,cAAcR,IA2Bb/D,MAAO,CACPwE,QAAS,KAGZgB,GACG,sBAAK/F,UAAU,0BAAf,UACI,qBACAgE,IAAK+B,EACLxF,MAAO,CACH0D,gBAAiB8B,GAErB7B,IAAI,KAEJ,sBAAKlE,UAAU,qBAAqBS,QAtC1B,WACtBuF,EAAc,KAqCF,UACA,0CACA,cAAC,IAAD,CAAiB5D,KAAM4C,gBCxC5BuB,EA5CF,SAAC,GAAe,IAAd1H,EAAa,EAAbA,QAEX,EAAiCG,mBAAS,IAA1C,mBAAOwH,EAAP,KAAiBC,EAAjB,KA+BA,OAhBA9G,qBAAU,WAGN,IAAM+G,EACNlI,EAAUc,WAAW,SAASqH,YAAW,SAAAC,GACrC,IAAMC,EAAYD,EAASE,KAAKC,KAAI,SAAAlD,GAAG,oBACnCC,GAAGD,EAAIC,IACJD,EAAItC,WAEXE,QAAQC,IAAImF,GAEZJ,EAAYI,MAEhB,OAAO,kBAAMH,OACd,IAGC,sBAAK1G,UAAU,YAAf,UACI,cAAC,EAAD,CAAanB,QAASA,IACtB,qBAAK0B,MAAO,CAAEC,UAAW,IAAzB,SACKgG,EAASO,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,CAAoBpE,QAASoE,EAAM9B,QAAS8B,EAAKxD,YAAc3E,EAAQW,KAA5DwH,EAAKlD,aCTrBmD,EA/BI,SAAC,GAAD,IAAEpI,EAAF,EAAEA,QAAF,OACf,8BACI,qBAAI0B,MAAO,CAAE2G,QAAS,OAAQC,eAAgB,SAAU3G,UAAW,IAAnE,UACI,6BACA,cAAC,IAAD,CAAM4G,GAAG,IAAI7G,MAAO,CAAE8G,YAAa,IAAnC,SACI,cAAC,IAAD,CAAiBjF,KAAMkF,IAAkBhF,MAAO,UAAWC,KAAK,WAGpE,6BACA,eAAC,IAAD,CACI6E,GAAG,WACH7G,MAAO,CACHgH,WAAY,GACZL,QAAS,OACTM,cAAe,SACfC,WAAY,SACZC,SAAU,IAPlB,UAUI,cAAC,IAAD,CAAiBtF,KAAMuF,IAAQrF,MAAO,UAAWC,KAAK,OACtD,sBAAMhC,MAAO,CAAEC,UAAW,IAA1B,SACK3B,EAAQI,YAAR,UACIJ,EAAQI,YADZ,cAEC,uBCkBP2I,EAvCG,SAAC,GAAwC,IAAvChJ,EAAsC,EAAtCA,YAAaiJ,EAAyB,EAAzBA,WAAYhJ,EAAa,EAAbA,QACzC,OACI,eAAC,IAAD,WACKgJ,GAAc,cAAC,EAAD,CAAYhJ,QAASA,IACpC,cAAC,IAAD,UACI,mCACCgJ,EACD,sBACItH,MAAO,CACPuH,SAAU,IACVC,MAAO,OACPC,OAAQ,SACRxH,UAAW,GACX0G,QAAS,OACTC,eAAgB,UAPpB,UAUI,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CAAMrJ,QAASA,MAEnB,cAAC,IAAD,CAAOoJ,OAAK,EAACC,KAAO,WAApB,SACI,cAACC,EAAD,CAASvJ,YAAaA,EAAaC,QAASA,MAEhD,cAAC,IAAD,CAAUuJ,KAAK,IAAIhB,GAAG,SAG1B,gCACA,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAO,IAApB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAUE,KAAK,IAAIhB,GAAG,iBCAvBiB,MAjCf,WACE,MAAwBrJ,oBAAS,GAAjC,mBAAOsJ,EAAP,KAAaC,EAAb,KACA,EAA8BvJ,mBAAS,MAAvC,mBAAOH,EAAP,KAAgB2J,EAAhB,KAuBA,OAtBA7I,qBAAU,WACRrB,EAAYmK,oBAAmB,SAACC,GAE5BF,EADCE,EACU,CACTzJ,YAAayJ,EAAKzJ,YAClBO,IAAKkJ,EAAKlJ,IACVO,cAAe,SAAC4I,GAAD,OAAUD,EAAK3I,cAAc4I,KAGnC,MAEbJ,GAAQ,QAET,IAUD,qCACCD,EAAO,cAAC,EAAD,CAAW1J,YAVD,WAClB,IAAM8J,EAAOpK,EAAYsK,YACzBJ,EAAW,CACTvJ,YAAayJ,EAAKzJ,YAClBO,IAAKkJ,EAAKlJ,IACVO,cAAe,SAAC4I,GAAD,OAAUD,EAAK3I,cAAc4I,OAKDd,WAAYgB,QAAQhK,GAAUA,QAASA,IAAa,kBACjG,4CAAgB,IAAIsH,MAAO2C,cAA3B,uB,MC3BJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9a13add3.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_API_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_API_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_API_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_API_MESSAGING_ID,\n    appId: process.env.REACT_APP_API_APP_ID,\n    measurementId: process.env.REACT_APP_API_MEASUREMENT_ID,\n  };\n\n  //export default firebase.initializeApp(firebaseConfig);\n  //firebase.analytics();\n  firebase.initializeApp(firebaseConfig);\n  export const firebaseInstance = firebase;\n  export const authService = firebase.auth();\n  export const dbService = firebase.firestore();\n  export const storageService = firebase.storage();","import { authService, dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nexport default ({refreshUser, userObj}) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n    const getMyPosts = async() => {\n        const posts = await dbService\n                            .collection(\"posts\")\n                            .where(\"creatorId\", \"==\", userObj.uid)\n                            .orderBy(\"createdAt\")\n                            .get();\n        //console.log(posts.docs.map((doc) => doc.data()));\n    }\n    useEffect(() => {\n        getMyPosts();\n    }, [])\n\n    const onChange = (event) => {\n        const {\n            target: {value}\n        } = event;\n        setNewDisplayName(value);\n    }\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName){\n            await userObj.updateProfile({\n                displayName: newDisplayName,\n            })\n            refreshUser();\n        }\n    }\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n            <input\n                onChange={onChange}\n                type=\"text\"\n                autoFocus\n                placeholder=\"Display Name\"\n                value={newDisplayName}\n                className=\"formInput\"\n            />\n            <input\n                type=\"submit\"\n                value=\"Update Profile\"\n                className=\"formBtn\"\n                style={{\n                    marginTop: 10,\n                }}\n            />\n        </form>\n        <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n            Log Out\n        </span>\n        </div>\n    );\n};","import { authService } from \"fbase\";\nimport React, { useState } from \"react\"\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n    const onChange = (event) => {\n        const {target: {name, value}} = event;\n        if(name === \"email\"){\n            setEmail(value)\n        } else if(name === \"password\"){\n            setPassword(value)\n        }\n    };\n    const onSubmit = async(event) => {\n        event.preventDefault(); //이메일, 비밀번호 입력후 버튼누르면 화면 새로고침 방지\n        try{\n            let data;\n            if(newAccount){\n                data = await authService.createUserWithEmailAndPassword(email, password)\n            } else {\n                data = await authService.signInWithEmailAndPassword(email, password)\n            }\n            console.log(data)\n        } catch(error) {\n            setError(error.message);\n        }\n        \n    };\n    const toggleAccount = () => setNewAccount((prev) => !prev) \n    return(\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input \n                    name=\"email\" \n                    type=\"email\" \n                    placeholder=\"Email\" \n                    required value={email} \n                    onChange={onChange} \n                    className=\"authInput\"\n                />\n                <input \n                    name=\"password\" \n                    type=\"password\" \n                    placeholder=\"Password\" \n                    required value={password} \n                    onChange={onChange} \n                    className=\"authInput\"\n                />\n                <input \n                    type=\"submit\" \n                    value={newAccount ? \"Create Account\" : \"Log In\"} \n                    className=\"authInput authSubmit\"/>\n            </form>\n            {error && <span className=\"authError\">{error}</span>}\n            <span onClick={toggleAccount} className=\"authSwitch\">\n                {newAccount ? \"Sign in\" : \"Create Account\"}\n            </span>\n            \n        </>\n    )\n};\n\nexport default AuthForm;","import AuthForm from \"components/AuthForm\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\n//export default () => <span>Auth</span>;\nconst Auth = () => {\n    \n    \n    const onSocialClick = async (event) => {\n        const {\n            target: {name},\n        }   =   event;\n        let provider;\n        if(name === \"google\"){\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === \"github\"){\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        await authService.signInWithPopup(provider);\n\n    };\n    return (\n        <>\n        <div className=\"authContainer\">\n        <FontAwesomeIcon\n            icon={faTwitter}\n            color={\"#04AAFF\"}\n            size=\"3x\"\n            style={{ marginBottom: 30 }}\n        />\n            <AuthForm/>\n            <div className=\"authBtns\">\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n                Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n                Continue with Github <FontAwesomeIcon icon={faGithub} />\n                </button>\n            </div>\n        </div>\n        </>\n    )\n}\n;\nexport default Auth;","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport {v4 as uuidv4} from \"uuid\"   //create random id\n\nconst PostUpdate = ({postObj,toggleEditing}) => {\n    const [newPost, setNewPost] = useState(postObj.text);\n    const [newAttachment, setNewAttachment] = useState(postObj.attachmentURL);\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        let newAttachmentURL = \"\";\n        if(newAttachment !== \"\"){\n            const attachmentRef = storageService.ref().child(`${postObj.creatorId}/${uuidv4()}`);\n            const response = await attachmentRef.putString(newAttachment, \"data_url\");\n            \n            newAttachmentURL = await response.ref.getDownloadURL();\n        }\n        await dbService.doc(`posts/${postObj.id}`).update({\n            text: newPost,\n            attachmentURL : newAttachmentURL\n          });\n        toggleEditing();\n    }\n    const onChange = (event) => {\n        const {\n            target: {value},\n        }   = event;\n        setNewPost(value);\n    }\n    const onFileChange = (event) => {\n        const {\n            target: {files},\n        }   =   event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const {\n                currentTarget: {result},\n            } = finishedEvent;\n            setNewAttachment(result);\n        };\n        reader.readAsDataURL(theFile);\n        console.log(storageService.ref().child(postObj.attachmentURL))\n    };\n    const onClearAttachment = () => {\n        setNewAttachment(\"\");\n    }\n    return (\n        <>\n        <form onSubmit={onSubmit} className=\"container postEdit\">\n            <input \n                type=\"text\" \n                placeholder=\"Edit your post\" \n                value={newPost} \n                onChange={onChange} \n                required \n                autoFocus \n                className=\"formInput\"/>\n            \n            {newAttachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                    src={newAttachment}\n                    style={{\n                        backgroundImage: newAttachment,\n                    }}\n                    alt=\"\"\n                    />\n                    <label htmlFor=\"update-file\" className=\"factoryUpdate__label\">\n                        <span>Change photos</span>\n                        <FontAwesomeIcon icon={faPlus} />\n                    </label>\n                    <input \n                        id=\"update-file\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={onFileChange}\n                        style={{\n                        opacity: 0,\n                        }}\n                    />\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                    <span>Remove</span>\n                    <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n                \n            )}\n            <input type=\"submit\" value=\"Update Post\" className=\"formBtn\"/>\n            \n        </form>\n        <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            Cancel\n        </span>\n        </>\n    )\n\n} \nexport default PostUpdate;","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport PostUpdate from \"./PostUpdate\";\n\nconst Post = ({postObj, isOwner}) => {\n    const [editing, setEditing] = useState(false);\n    const onDeleteClick = async () => {\n        const isDelete = window.confirm(\"Are you sure you want to delete this post?\");\n        if(isDelete){\n            await dbService.doc(`posts/${postObj.id}`).delete();\n            await storageService.refFromURL(postObj.attachmentURL).delete();\n        }\n    };\n    const toggleEditing = () => setEditing((prev) => !prev);\n    \n    return (\n        <>\n        <div className=\"post\">\n            {\n                \n                editing ? ( //Edit버튼을 눌렸을 경우\n                    <>\n                    {isOwner && (\n                        <PostUpdate postObj={postObj} toggleEditing={toggleEditing} />\n                    )\n\n                    }\n                    </>\n                    ) : (\n                    <>\n                    {postObj.attachmentURL && <img src={postObj.attachmentURL} alt={postObj.attachmentURL}/>}\n                    \n                    <h4>{postObj.text}</h4>\n                    \n                    \n                    {isOwner && (\n                        <div className=\"post__actions\">\n                            <span onClick={onDeleteClick}>\n                            <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={toggleEditing}>\n                            <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                    </>\n                    )\n                \n            }\n            \n        </div>\n        </>\n    );\n};\n\nexport default Post;","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\"\nimport {v4 as uuidv4} from \"uuid\"   //create random id\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst PostFactory = ({userObj}) => {\n    const [upload, setUpload] =  useState(\"\");\n    \n    const [attachment, setAttachment] = useState(\"\");\n    const onSubmit = async (event) => {\n        console.log(upload,userObj.uid,attachment)\n        if (upload === \"\") {\n            return;\n        }      \n        event.preventDefault();\n        let attachmentURL = \"\";\n        if(attachment !== \"\"){\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const response = await attachmentRef.putString(attachment, \"data_url\");\n            \n            attachmentURL = await response.ref.getDownloadURL();\n        }\n        const post = {\n            text : upload,\n            createdAt : Date.now(),\n            creatorId : userObj.uid,\n            attachmentURL\n        }\n        await dbService.collection(\"posts\").add(post);\n        setUpload(\"\");\n        setAttachment(\"\");\n    };\n    const onChange = (event) => {\n        const {target: {value}} = event;\n        setUpload(value);\n    };\n    const onFileChange = (event) => {\n        const {\n            target: {files},\n        }   =   event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const {\n                currentTarget: {result},\n            } = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile);\n    };\n    const onClearAttachment = () => {\n        setAttachment(\"\");\n    }\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input\n                className=\"factoryInput__input\"\n                value={upload}\n                onChange={onChange}\n                type=\"text\"\n                placeholder=\"What's on your mind?\"\n                maxLength={120}\n                />\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input \n                id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{\n                opacity: 0,\n                }}\n            />\n            {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                    src={attachment}\n                    style={{\n                        backgroundImage: attachment,\n                    }}\n                    alt=\"\"\n                    />\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                    <span>Remove</span>\n                    <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n                \n            )}\n        </form>\n    )};\n\nexport default PostFactory;","import Post from \"components/Post\";\nimport PostFactory from \"components/PostFactory\";\nimport { dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\n\n\n//export default () => <span>Home</span>;\nconst Home = ({userObj}) => {\n    \n    const [postlist, setPostList] =  useState([]);\n    \n    /*\n    const getPostList = async() => {\n        const dbPosts = await dbService.collection(\"posts\").get();\n        dbPosts.forEach((document) => {\n            const postObject = {\n                ...document.data(),\n                id: document.id,\n            }\n            //console.log(postObject)\n            setPostList(prev => [postObject, ...prev]);\n        })\n        \n    }*/\n    useEffect(() => {\n        //getPostList();\n        //실시간으로 화면에 나타내기 위해 snapshot 사용\n        const getData = \n        dbService.collection(\"posts\").onSnapshot(snapshot => {\n            const postArray = snapshot.docs.map(doc => ({\n                id:doc.id,\n                ...doc.data(),\n            }));\n            console.log(postArray)\n        \n            setPostList(postArray);\n        });\n        return () => getData();\n    }, []);\n    \n    return (\n        <div className=\"container\">\n            <PostFactory userObj={userObj}/>\n            <div style={{ marginTop: 30 }}>\n                {postlist.map((list) => (\n                    <Post key={list.id} postObj={list} isOwner={list.creatorId === userObj.uid}/>\n                ))}\n            </div>\n        </div>\n    );\n};\nexport default Home;","import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCloudUploadAlt, faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({userObj}) => (\n    <nav>\n        <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n            <li>\n            <Link to=\"/\" style={{ marginRight: 10 }}>\n                <FontAwesomeIcon icon={faCloudUploadAlt} color={\"#04AAFF\"} size=\"2x\" />\n            </Link>\n            </li>\n            <li>\n            <Link\n                to=\"/profile\"\n                style={{\n                    marginLeft: 10,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    fontSize: 12,\n                }}\n                >\n                <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                <span style={{ marginTop: 10 }}>\n                    {userObj.displayName\n                    ? `${userObj.displayName}'s Profile`\n                    : \"Profile\"}\n                </span>\n            </Link>\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default Navigation;","import React from \"react\";\nimport {HashRouter as Router, Redirect, Route, Switch} from \"react-router-dom\"\nimport Profile from \"../routes/Profile\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({refreshUser, isLoggedIn, userObj}) => {\n    return(\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj}/>}\n            <Switch>\n                <>\n                {isLoggedIn ? (\n                <div\n                    style={{\n                    maxWidth: 890,\n                    width: \"100%\",\n                    margin: \"0 auto\",\n                    marginTop: 80,\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    }}\n                >\n                    <Route exact path=\"/\">\n                        <Home userObj={userObj} />\n                    </Route>\n                    <Route exact path = \"/profile\">\n                        <Profile refreshUser={refreshUser} userObj={userObj}/>\n                    </Route>\n                    <Redirect from=\"*\" to=\"/\"/>\n                </div>\n                ) : (\n                <div>\n                <Route exact path = \"/\">\n                    <Auth/>\n                </Route>\n                <Redirect from=\"*\" to=\"/\"/>\n                </div>\n                )}\n                </>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default AppRouter","import React, {useEffect, useState} from \"react\";\nimport AppRouter from \"components/Router\";\nimport {authService} from \"fbase\"\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {  //로그인상태변화 체크\n      if(user){ //사용자로그인 했을경우\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null)\n      }\n      setInit(true)\n    });\n  }, []);  \n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n  return (\n    <>\n    {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj}/> : \"Initializing...\"}\n    <footer>&copy; {new Date().getFullYear()} By. dbtwelve</footer>\n    </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}