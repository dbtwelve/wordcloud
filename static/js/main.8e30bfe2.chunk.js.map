{"version":3,"sources":["fbase.js","routes/Profile.js","components/AuthForm.js","routes/Auth.js","components/PostCloud.js","components/PostUpdate.js","components/Post.js","components/PostFactory.js","routes/Home.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","refreshUser","userObj","history","useHistory","useState","displayName","newDisplayName","setNewDisplayName","getMyPosts","a","collection","where","uid","orderBy","get","useEffect","onSubmit","event","preventDefault","updateProfile","className","onChange","value","target","type","autoFocus","placeholder","style","marginTop","onClick","signOut","push","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","required","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","marginBottom","faGoogle","faGithub","PostCloud","setAttachment","textURL","setTextURL","isURL","setIsURL","isTXT","setIsTXT","getBase64FromUrl","url","fetch","data","blob","Promise","resolve","reader","FileReader","readAsDataURL","onloadend","base64data","result","onTextCloudSubmit","s_type","creatorId","method","headers","body","JSON","stringify","sourceType","source","imageURL","then","res","json","Response","onChangeURL","urlprev","faSearch","txtprev","faFont","faCloudDownloadAlt","width","height","PostUpdate","postObj","toggleEditing","text","newPost","setNewPost","attachmentURL","newAttachment","setNewAttachment","newAttachmentURL","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","doc","id","update","src","backgroundImage","alt","visibility","htmlFor","faPlus","accept","theFile","files","finishedEvent","currentTarget","opacity","faTimes","Post","isOwner","editing","setEditing","onDeleteClick","window","confirm","delete","refFromURL","open","faTrash","faPencilAlt","PostFactory","upload","setUpload","attachment","post","createdAt","Date","now","add","maxLength","set","Home","postlist","setPostList","getData","onSnapshot","snapshot","postArray","docs","map","list","Navigation","display","justifyContent","to","marginRight","faCloudUploadAlt","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","margin","exact","path","Profile","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e30bfe2.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_API_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_API_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_API_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_API_MESSAGING_ID,\n    appId: process.env.REACT_APP_API_APP_ID,\n    measurementId: process.env.REACT_APP_API_MEASUREMENT_ID,\n  };\n\n  //export default firebase.initializeApp(firebaseConfig);\n  //firebase.analytics();\n  firebase.initializeApp(firebaseConfig);\n  export const firebaseInstance = firebase;\n  export const authService = firebase.auth();\n  export const dbService = firebase.firestore();\n  export const storageService = firebase.storage();","import { authService, dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nexport default ({refreshUser, userObj}) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n    const getMyPosts = async() => {\n        const posts = await dbService\n                            .collection(\"posts\")\n                            .where(\"creatorId\", \"==\", userObj.uid)\n                            .orderBy(\"createdAt\")\n                            .get();\n        //console.log(posts.docs.map((doc) => doc.data()));\n    }\n    useEffect(() => {\n        getMyPosts();\n    }, [])\n\n    const onChange = (event) => {\n        const {\n            target: {value}\n        } = event;\n        setNewDisplayName(value);\n    }\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName){\n            await userObj.updateProfile({\n                displayName: newDisplayName,\n            })\n            refreshUser();\n        }\n    }\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n            <input\n                onChange={onChange}\n                type=\"text\"\n                autoFocus\n                placeholder=\"Display Name\"\n                value={newDisplayName}\n                className=\"formInput\"\n            />\n            <input\n                type=\"submit\"\n                value=\"Update Profile\"\n                className=\"formBtn\"\n                style={{\n                    marginTop: 10,\n                }}\n            />\n        </form>\n        <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n            Log Out\n        </span>\n        </div>\n    );\n};","import { authService } from \"fbase\";\nimport React, { useState } from \"react\"\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n    const onChange = (event) => {\n        const {target: {name, value}} = event;\n        if(name === \"email\"){\n            setEmail(value)\n        } else if(name === \"password\"){\n            setPassword(value)\n        }\n    };\n    const onSubmit = async(event) => {\n        event.preventDefault(); //이메일, 비밀번호 입력후 버튼누르면 화면 새로고침 방지\n        try{\n            let data;\n            if(newAccount){\n                data = await authService.createUserWithEmailAndPassword(email, password)\n            } else {\n                data = await authService.signInWithEmailAndPassword(email, password)\n            }\n            //console.log(data)\n        } catch(error) {\n            setError(error.message);\n        }\n        \n    };\n    const toggleAccount = () => setNewAccount((prev) => !prev) \n    return(\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input \n                    name=\"email\" \n                    type=\"email\" \n                    placeholder=\"Email\" \n                    required value={email} \n                    onChange={onChange} \n                    className=\"authInput\"\n                />\n                <input \n                    name=\"password\" \n                    type=\"password\" \n                    placeholder=\"Password\" \n                    required value={password} \n                    onChange={onChange} \n                    className=\"authInput\"\n                />\n                <input \n                    type=\"submit\" \n                    value={newAccount ? \"Create Account\" : \"Log In\"} \n                    className=\"authInput authSubmit\"/>\n            </form>\n            {error && <span className=\"authError\">{error}</span>}\n            <span onClick={toggleAccount} className=\"authSwitch\">\n                {newAccount ? \"Sign in\" : \"Create Account\"}\n            </span>\n            \n        </>\n    )\n};\n\nexport default AuthForm;","import AuthForm from \"components/AuthForm\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\n//export default () => <span>Auth</span>;\nconst Auth = () => {\n    \n    \n    const onSocialClick = async (event) => {\n        const {\n            target: {name},\n        }   =   event;\n        let provider;\n        if(name === \"google\"){\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === \"github\"){\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        await authService.signInWithPopup(provider);\n\n    };\n    return (\n        <>\n        <div className=\"authContainer\">\n        <FontAwesomeIcon\n            icon={faTwitter}\n            color={\"#04AAFF\"}\n            size=\"3x\"\n            style={{ marginBottom: 30 }}\n        />\n            <AuthForm/>\n            <div className=\"authBtns\">\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n                Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n                Continue with Github <FontAwesomeIcon icon={faGithub} />\n                </button>\n            </div>\n        </div>\n        </>\n    )\n}\n;\nexport default Auth;","import React, { useEffect, useState } from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCloudDownloadAlt, faFont, faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\n\n\nconst PostCloud = ({userObj, setAttachment}) => {\n    const [textURL, setTextURL] = useState(\"\");\n    const [isURL, setIsURL] = useState(false);\n    const [isTXT, setIsTXT] = useState(false);\n\n    const getBase64FromUrl = async (url) => {\n        const data = await fetch(url);\n        const blob = await data.blob();\n        return new Promise((resolve) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(blob); \n            reader.onloadend = function() {\n            const base64data = reader.result;   \n            resolve(base64data);\n            }\n        });\n    }\n\n    const onTextCloudSubmit = async (event) => {\n        \n        if (textURL === \"\") {\n            setIsURL(false)\n            setIsTXT(false)\n            return;\n        }      \n        event.preventDefault();\n        \n        let s_type = \"\"\n        if (isURL === true){\n            s_type = \"U\"\n        }\n        else{\n            s_type = \"T\"\n        }\n        //console.log(userObj)\n        let uid = \"\"\n        if(userObj.uid){\n            uid = userObj.uid\n        }\n        else{\n            uid = userObj.creatorId\n        }\n        fetch('http://127.0.0.1:8000/wordcloud/', {\n            method: 'POST',\n            headers:{\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                sourceType: s_type, \n                source: textURL,\n                uid: uid,\n                imageURL: \"\"\n            })\n            \n        })\n        .then(res => res.json())\n        .then((Response) => {\n            //console.log('response:',Response)\n            //setAttachment(Response.imageURL)\n            getBase64FromUrl(Response.imageURL).then(data => setAttachment(data))\n        })\n\n    };\n\n    const onChangeURL = (event) => {\n        const {target: {value}} = event;\n        setTextURL(value);\n    };\n\n    const toggleURL = () => {\n        setIsURL((urlprev) => !urlprev);\n        if(isTXT === true){\n            setIsTXT(false)\n            setTextURL(\"\")\n        }\n        //console.log(\"isURL\",isURL,\"isTXT\",isTXT)\n    }\n    const toggleTXT = () => {\n        setIsTXT((txtprev) => !txtprev);\n        if(isURL === true){\n            setIsURL(false)\n            setTextURL(\"\")\n        }\n        //console.log(\"isTXT\",isTXT,\"isURL\",isURL)\n    }\n\n    return (\n        <>\n        <span>\n            <label className=\"Input__label\" onClick={toggleURL}>\n                <span>URL</span>\n                <FontAwesomeIcon icon={faSearch} />\n            </label>\n            <label className=\"Input__label\" onClick={toggleTXT}>\n                <span>TXT</span>\n                <FontAwesomeIcon icon={faFont} />\n            </label>\n        </span>\n        {\n            isURL ? (\n                <>\n                <form onSubmit={onTextCloudSubmit} className=\"sourceForm\">\n                    <div className=\"factoryInput__container\">\n                        <input\n                        className=\"URL_Input__input\"\n                        value={textURL}\n                        onChange={onChangeURL}\n                        type=\"url\"\n                        placeholder=\"Put your URL to convert wordcloud.\"\n                        />\n                        <button onClick={onTextCloudSubmit} type=\"submit\" value=\"&darr;\" className=\"URL_Input__arrow\">\n                            <FontAwesomeIcon icon={faCloudDownloadAlt} width=\"200px\" height=\"200px\" />\n                        </button>\n                    </div>\n                </form>\n                </>\n            ) : (\n                <>\n                </>\n            )\n        }\n        {\n            isTXT ? (\n                <>\n                <form onSubmit={onTextCloudSubmit} className=\"sourceForm\">\n                    <div className=\"factoryInput__container\">\n                        <textarea\n                        className=\"TXT_Input__input\"\n                        value={textURL}\n                        onChange={onChangeURL}\n                        placeholder=\"Put your Text to convert wordcloud.\"\n                        />             \n                        <button onClick={onTextCloudSubmit} type=\"submit\" value=\"&darr;\" className=\"TXT_Input__arrow\">\n                            <FontAwesomeIcon icon={faCloudDownloadAlt} width=\"200px\" height=\"200px\" />\n                        </button>\n                    </div>\n                </form>\n                </>\n            ) : (\n                <>\n                </>\n            )\n        }\n        </>\n    )\n};\n\nexport default PostCloud;","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport {v4 as uuidv4} from \"uuid\"   //create random id\nimport PostCloud from \"./PostCloud\";\n\nconst PostUpdate = ({postObj,toggleEditing}) => {\n    const [newPost, setNewPost] = useState(postObj.text);\n    const [newAttachment, setNewAttachment] = useState(postObj.attachmentURL);\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        let newAttachmentURL = \"\";\n        if(newAttachment !== \"\"){\n            const attachmentRef = storageService.ref().child(`${postObj.creatorId}/${uuidv4()}`);\n            const response = await attachmentRef.putString(newAttachment, \"data_url\");\n            \n            newAttachmentURL = await response.ref.getDownloadURL();\n        }\n        await dbService.doc(`posts/${postObj.id}`).update({\n            text: newPost,\n            attachmentURL : newAttachmentURL\n          });\n        toggleEditing();\n    }\n    const onChange = (event) => {\n        const {\n            target: {value},\n        }   = event;\n        setNewPost(value);\n    }\n    const onFileChange = (event) => {\n        const {\n            target: {files},\n        }   =   event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const {\n                currentTarget: {result},\n            } = finishedEvent;\n            setNewAttachment(result);\n        };\n        reader.readAsDataURL(theFile);\n        //console.log(storageService.ref().child(postObj.attachmentURL))\n    };\n    const onClearAttachment = () => {\n        setNewAttachment(\"\");\n    }\n    \n    return (\n        <>\n        <form onSubmit={onSubmit} className=\"container postEdit\">\n            <input \n                type=\"text\" \n                placeholder=\"Edit your post\" \n                value={newPost} \n                onChange={onChange} \n                required \n                autoFocus \n                className=\"formInput\"/>\n            \n            {newAttachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                    src={newAttachment}\n                    style={{\n                        backgroundImage: newAttachment,\n                    }}\n                    alt=\"\"\n                    />\n                    <PostCloud userObj={postObj} setAttachment={setNewAttachment}/>\n                    <div style={{visibility: \"collapse\"}}>\n                    <label htmlFor=\"update-file\" className=\"factoryUpdate__label\">\n                        <span>Change photos</span>\n                        <FontAwesomeIcon icon={faPlus} />\n                    </label>\n                    <input \n                        id=\"update-file\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={onFileChange}\n                        style={{\n                        opacity: 0,\n                        }}\n                    />\n                    </div>\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                    <span>Remove</span>\n                    <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n                \n            )}\n            <input type=\"submit\" value=\"Update Post\" className=\"formBtn\"/>\n            \n        </form>\n        <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            Cancel\n        </span>\n        </>\n    )\n\n} \nexport default PostUpdate;","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport PostUpdate from \"./PostUpdate\";\n\nconst Post = ({postObj, isOwner}) => {\n    const [editing, setEditing] = useState(false);\n    \n    const onImageClick = () => {\n        window.open(postObj.attachmentURL)\n    };\n    const onDeleteClick = async () => {\n        const isDelete = window.confirm(\"Are you sure you want to delete this post?\");\n        if(isDelete){\n            await dbService.doc(`posts/${postObj.id}`).delete();\n            await storageService.refFromURL(postObj.attachmentURL).delete();\n        }\n    };\n    const toggleEditing = () => setEditing((prev) => !prev);\n    \n    \n    return (\n        <>\n        <div className=\"post\">\n            {\n                \n                editing ? ( //Edit버튼을 눌렸을 경우\n                    <>\n                    {isOwner && (\n                        <PostUpdate postObj={postObj} toggleEditing={toggleEditing} />\n                    )\n\n                    }\n                    </>\n                    ) : (\n                    <>\n                    {postObj.attachmentURL && <img onClick={onImageClick} src={postObj.attachmentURL} alt={postObj.attachmentURL}/>}\n                    \n                    <h4>{postObj.text}</h4>\n                    \n                    \n                    {isOwner && (\n                        <div className=\"post__actions\">\n                            <span onClick={onDeleteClick}>\n                            <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={toggleEditing}>\n                            <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                    </>\n                    )\n                \n            }\n            \n        </div>\n        </>\n    );\n};\n\nexport default Post;","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\"\nimport {v4 as uuidv4} from \"uuid\"   //create random id\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport PostCloud from \"./PostCloud\";\n\nconst PostFactory = ({userObj}) => {\n    const [upload, setUpload] =  useState(\"\");\n    \n    const [attachment, setAttachment] = useState(\"\");\n\n    const onSubmit = async (event) => {\n        if (upload === \"\") {\n            return;\n        }      \n        event.preventDefault();\n        let attachmentURL = \"\";\n        if(attachment !== \"\"){\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const response = await attachmentRef.putString(attachment, \"data_url\");\n            \n            attachmentURL = await response.ref.getDownloadURL();\n        }\n        const post = {\n            text : upload,\n            createdAt : Date.now(),\n            creatorId : userObj.uid,\n            attachmentURL\n        }\n        await dbService.collection(\"posts\").add(post);\n        setUpload(\"\");\n        setAttachment(\"\");\n        \n    };\n    const onChange = (event) => {\n        const {target: {value}} = event;\n        setUpload(value);\n    };\n    \n    const onFileChange = (event) => {\n        const {\n            target: {files},\n        }   =   event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => {\n            const {\n                currentTarget: {result},\n            } = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile);\n    };\n    const onClearAttachment = () => {\n        setAttachment(\"\");\n    }\n    \n\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input\n                className=\"factoryInput__input\"\n                value={upload}\n                onChange={onChange}\n                type=\"text\"\n                placeholder=\"Comment for your cloud.\"\n                maxLength={120}\n                />\n                {PostCloud.set}\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n            </div>\n            <PostCloud userObj={userObj} setAttachment={setAttachment}/>\n            <div style={{visibility: \"collapse\"}}>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input \n                id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{\n                opacity: 0,\n                }}\n            />\n            </div>\n            {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                    src={attachment}\n                    style={{\n                        backgroundImage: attachment,\n                    }}\n                    alt=\"\"\n                    />\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                    <span>Remove</span>\n                    <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n                \n            )}\n        </form>\n    )};\n\nexport default PostFactory;","import Post from \"components/Post\";\nimport PostFactory from \"components/PostFactory\";\nimport { dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\n\n\n//export default () => <span>Home</span>;\nconst Home = ({userObj}) => {\n    \n    const [postlist, setPostList] =  useState([]);\n    \n    /*\n    const getPostList = async() => {\n        const dbPosts = await dbService.collection(\"posts\").get();\n        dbPosts.forEach((document) => {\n            const postObject = {\n                ...document.data(),\n                id: document.id,\n            }\n            //console.log(postObject)\n            setPostList(prev => [postObject, ...prev]);\n        })\n        \n    }*/\n    useEffect(() => {\n        //getPostList();\n        //실시간으로 화면에 나타내기 위해 snapshot 사용\n        const getData = \n        dbService.collection(\"posts\").onSnapshot(snapshot => {\n            const postArray = snapshot.docs.map(doc => ({\n                id:doc.id,\n                ...doc.data(),\n            }));\n            //console.log(postArray)\n        \n            setPostList(postArray);\n        });\n        return () => getData();\n    }, []);\n    \n    return (\n        <div className=\"container\">\n            <PostFactory userObj={userObj}/>\n            <div style={{ marginTop: 30 }}>\n                {postlist.map((list) => (\n                    <Post key={list.id} postObj={list} isOwner={list.creatorId === userObj.uid}/>\n                ))}\n            </div>\n        </div>\n    );\n};\nexport default Home;","import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCloudUploadAlt, faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({userObj}) => (\n    <nav>\n        <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n            <li>\n            <Link to=\"/\" style={{ marginRight: 10 }}>\n                <FontAwesomeIcon icon={faCloudUploadAlt} color={\"#04AAFF\"} size=\"2x\" />\n            </Link>\n            </li>\n            <li>\n            <Link\n                to=\"/profile\"\n                style={{\n                    marginLeft: 10,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    fontSize: 12,\n                }}\n                >\n                <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                <span style={{ marginTop: 10 }}>\n                    {userObj.displayName\n                    ? `${userObj.displayName}'s Profile`\n                    : \"Profile\"}\n                </span>\n            </Link>\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default Navigation;","import React from \"react\";\nimport {HashRouter as Router, Redirect, Route, Switch} from \"react-router-dom\"\nimport Profile from \"../routes/Profile\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Navigation from \"./Navigation\";\n\nconst AppRouter = ({refreshUser, isLoggedIn, userObj}) => {\n    return(\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj}/>}\n            <Switch>\n                <>\n                {isLoggedIn ? (\n                <div\n                    style={{\n                    maxWidth: 890,\n                    width: \"100%\",\n                    margin: \"0 auto\",\n                    marginTop: 80,\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    }}\n                >\n                    <Route exact path=\"/\">\n                        <Home userObj={userObj} />\n                    </Route>\n                    <Route exact path = \"/profile\">\n                        <Profile refreshUser={refreshUser} userObj={userObj}/>\n                    </Route>\n                    <Redirect from=\"*\" to=\"/\"/>\n                </div>\n                ) : (\n                <div>\n                <Route exact path = \"/\">\n                    <Auth/>\n                </Route>\n                <Redirect from=\"*\" to=\"/\"/>\n                </div>\n                )}\n                </>\n            </Switch>\n        </Router>\n    )\n}\n\nexport default AppRouter","import React, {useEffect, useState} from \"react\";\nimport AppRouter from \"components/Router\";\nimport {authService} from \"fbase\"\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {  //로그인상태변화 체크\n      if(user){ //사용자로그인 했을경우\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null)\n      }\n      setInit(true)\n    });\n  }, []);  \n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n  return (\n    <>\n    {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj}/> : \"Initializing...\"}\n    <footer className=\"footer\">&copy; {new Date().getFullYear()} By. dbtwelve</footer>\n    </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}